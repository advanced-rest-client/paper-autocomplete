{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "# `<paper-autocomplete>`\n\nUse `paper-autocomplete` to add autocomplete functionality to the input elements.\nIt also works wilt polymer inputs.\n\nThe element works with static list of suggestions or with dynamic (asynchronous)\noperation that require calling te backend or local datastore.\nIn second case you should set `loader` property which will display a loader animation\nwhile results are loaded.\n\nYou must associate suggestions with the input field. This can be done by passing\nan element reference to the `target` property.\n\n## Example:\n\n### Static suggestions\n\n```html\n<paper-input label=\"Enter fruit name\" id=\"fruits\"></paper-input>\n<paper-autocomplete\n id=\"fruitsSuggestions\"\n target=\"[[fruits]]\"\n on-selected=\"_fruitSelected\"></paper-input-autocomplete>\n\n<script>\ndocument.querySelector('#fruitsSuggestions').source = ['Apple', 'Orange', 'Bananas'];\n< /script>\n```\n\n### Dynamic suggestions\n\n```html\n<paper-input-container>\n <label>Enter friut name</label>\n <input is=\"iron-input\" type=\"text\" value=\"{{async::input}}\" id=\"asyncField\" />\n</paper-input-container>\n<paper-autocomplete loader id=\"fruitAsync\" on-query=\"_asyncSuggestions\"></paper-input-autocomplete>\n\n<script>\n document.querySelector('#fruitAsync').target = document.querySelector('#asyncField');\n document.querySelector('#fruitAsync').addEventListener('query', (e) => {\n   const query = e.detail.value;\n   asyncQuery(query, (suggestions) => {\n     document.querySelector('#fruitAsync').source = suggestions;\n   });\n });\n< /script>\n```\n\n## Displaying the suggestions\n\nSuggestions array can be either an array of strings or objects.\nFor strings, displayed in the list and inserted to the input field value is the same item.\n\nYou can set different list item display value and value inserted into the field when the array contains\nonject. Each object must contain `value` and `display` properties where `value` property\nwill be inserted into the text field and `display` will be used to display description inside the list.\n\n## Query event\n\nThe `query` event is fired when the user query change in the way so the element is\nnot able to display suggestions properly.\nThis means if the user add a letter to previously entered value the query event will not\nfire since it already have list of suggestion that should be used to filter suggestions from.\nAnd again when the user will delete a letter the element will still have list of\nsource suggestions to filter suggestions from.\nHowever, if the user change the query entirely it will fire `query` event\nand the app will expect to `source` to change. Setting source is not mandatory.\n\n## Preventing from changing the input value\n\nTo prevent the element to update the value of the target input, listent for\n`selected` event and cancel it by calling `event.preventDefault()` function.\n\n## Styling\n\nSuggestions are positioned absolutely! You must include relative positioned parent to contain the suggestion\ndisplay in the same area.\nUse CSS properties to position the display in the left bottom corner of the input field.\n\n`<paper-autocomplete>` provides the following custom properties and mixins\nfor styling:\n\n| Custom property | Description | Default |\n----------------|-------------|----------\n| `--paper-autocomplete` | Mixin applied to the display | `{}` |\n| `--paper-autocomplete-background-color` | Background color of suggestions | `{}` |",
      "summary": "",
      "path": "paper-autocomplete.js",
      "properties": [
        {
          "name": "source",
          "type": "(Array.<Object> | Array.<String>)",
          "description": "List of suggestions to display.\nIf the array items are strings they will be used for display a suggestions and\nto insert a value.\nIf the list is an object the each object must contain `value` and `display`\nproperties.\nThe `display` property will be used in the suggestions list and the\n`value` property will be used to insert the value to the referenced text field.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 178,
              "column": 6
            },
            "end": {
              "line": 180,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "value",
          "type": "Object | null | undefined",
          "description": "`value` Selected object from the suggestions",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 184,
              "column": 6
            },
            "end": {
              "line": 187,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "suggestions",
          "type": "Array | null | undefined",
          "description": "List of suggestion that are displayed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 191,
              "column": 6
            },
            "end": {
              "line": 195,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Array"
            }
          },
          "defaultValue": "[]"
        },
        {
          "name": "target",
          "type": "HTMLElement",
          "description": "A target input field to observe.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 200,
              "column": 6
            },
            "end": {
              "line": 200,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "HTMLElement"
            }
          }
        },
        {
          "name": "selectedItem",
          "type": "Number",
          "description": "Currently selected item on a suggestions list.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "scrollTarget",
          "type": "HTMLElement | null | undefined",
          "description": "Scroll target element",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 210,
              "column": 6
            },
            "end": {
              "line": 212,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "HTMLElement"
            }
          }
        },
        {
          "name": "sizingTarget",
          "type": "HTMLElement | null | undefined",
          "description": "Sizing target element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 214,
              "column": 6
            },
            "end": {
              "line": 216,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "HTMLElement"
            }
          }
        },
        {
          "name": "loading",
          "type": "boolean | null | undefined",
          "description": "True when user query changed and waiting for `source` property update",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 220,
              "column": 6
            },
            "end": {
              "line": 225,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "loader",
          "type": "boolean | null | undefined",
          "description": "Set this to true if you use async operation in response for query event.\nThis will display a loader when querying for more suggestions.\nDo not use it it you do not handle suggestions asynchronously.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 231,
              "column": 6
            },
            "end": {
              "line": 234,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_showLoader",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 236,
              "column": 6
            },
            "end": {
              "line": 239,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "isAttached",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 241,
              "column": 6
            },
            "end": {
              "line": 241,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "openOnFocus",
          "type": "boolean | null | undefined",
          "description": "If true it will opend suggestions on input field focus.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 244,
              "column": 6
            },
            "end": {
              "line": 247,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_oldTarget",
          "type": "HTMLElement | null | undefined",
          "description": "listeners.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 250,
              "column": 6
            },
            "end": {
              "line": 250,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "HTMLElement"
            }
          }
        },
        {
          "name": "_keyTarget",
          "type": "HTMLElement | null | undefined",
          "description": "An event target for key down event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 252,
              "column": 6
            },
            "end": {
              "line": 257,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "HTMLElement"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 278,
              "column": 2
            },
            "end": {
              "line": 281,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 283,
              "column": 2
            },
            "end": {
              "line": 286,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 288,
              "column": 2
            },
            "end": {
              "line": 298,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_targetChanged",
          "description": "Handler for target property change.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 306,
              "column": 2
            },
            "end": {
              "line": 328,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "target",
              "type": "HTMLElement",
              "description": "Target input element"
            },
            {
              "name": "isAttached",
              "type": "Boolean",
              "description": "True if this element is attached to the DOM."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_valueChanged",
          "description": "Handler for target input change.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 333,
              "column": 2
            },
            "end": {
              "line": 356,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_disaptchQuery",
          "description": "Disaptches query event and returns it.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 362,
              "column": 2
            },
            "end": {
              "line": 370,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "String",
              "description": "Current input value."
            }
          ],
          "return": {
            "type": "CustomEvent"
          }
        },
        {
          "name": "_filterSuggestions",
          "description": "Filter `source` array for current value.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 374,
              "column": 2
            },
            "end": {
              "line": 422,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_suggestionDisplay",
          "description": "Compute suggestion display value",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 424,
              "column": 2
            },
            "end": {
              "line": 426,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "selectPrevious",
          "description": "Highlight previous suggestion",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 430,
              "column": 2
            },
            "end": {
              "line": 439,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "selectNext",
          "description": "Highlight next suggestion",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 443,
              "column": 2
            },
            "end": {
              "line": 452,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "acceptSelection",
          "description": "Accepts currently selected suggestion and enters it into a text field.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 456,
              "column": 2
            },
            "end": {
              "line": 467,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_inform",
          "description": "Dispatches `selected` event with new value.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 473,
              "column": 2
            },
            "end": {
              "line": 485,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "String",
              "description": "Selected value."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "ensureItemVisible",
          "description": "Ensure that the selected item is visible in the scroller.\nWhen there is more elements to show than space available (height)\nthen some elements will be hidden. When the user use arrows to navigate\nthe selection may get out from the screen. This function ensures that\ncurrently selected element is visible.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 496,
              "column": 2
            },
            "end": {
              "line": 524,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "bottom",
              "type": "Boolean",
              "description": "If trully it will ensure that the element is\nvisible at the bottom of the container. On the top otherwise."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeShowLoader",
          "description": "Computes value for `_showLoader` property.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 532,
              "column": 2
            },
            "end": {
              "line": 534,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "loader",
              "type": "Boolean"
            },
            {
              "name": "loading",
              "type": "Boolean"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if the loader should be rendered."
          }
        },
        {
          "name": "_targetFocus",
          "description": "Handler for target element focus event.\nOpens the autocomplete if `openOnFocus` is set.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 539,
              "column": 2
            },
            "end": {
              "line": 548,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_targetClick",
          "description": "Prohibits click event propagation when the overlay is opened so\nthe overlay manager won't close it immidietly after focusing (with click\nevent included) in the target field.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 556,
              "column": 2
            },
            "end": {
              "line": 562,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "ClickEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_ensureSelection",
          "description": "Selects a first available item after filtering results and missing\nselection.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 567,
              "column": 2
            },
            "end": {
              "line": 572,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 123,
          "column": 0
        },
        "end": {
          "line": 573,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "UiElements.PaperAutocomplete",
      "attributes": [
        {
          "name": "source",
          "description": "List of suggestions to display.\nIf the array items are strings they will be used for display a suggestions and\nto insert a value.\nIf the list is an object the each object must contain `value` and `display`\nproperties.\nThe `display` property will be used in the suggestions list and the\n`value` property will be used to insert the value to the referenced text field.",
          "sourceRange": {
            "start": {
              "line": 178,
              "column": 6
            },
            "end": {
              "line": 180,
              "column": 7
            }
          },
          "metadata": {},
          "type": "(Array.<Object> | Array.<String>)"
        },
        {
          "name": "value",
          "description": "`value` Selected object from the suggestions",
          "sourceRange": {
            "start": {
              "line": 184,
              "column": 6
            },
            "end": {
              "line": 187,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "suggestions",
          "description": "List of suggestion that are displayed.",
          "sourceRange": {
            "start": {
              "line": 191,
              "column": 6
            },
            "end": {
              "line": 195,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "target",
          "description": "A target input field to observe.",
          "sourceRange": {
            "start": {
              "line": 200,
              "column": 6
            },
            "end": {
              "line": 200,
              "column": 25
            }
          },
          "metadata": {},
          "type": "HTMLElement"
        },
        {
          "name": "selected-item",
          "description": "Currently selected item on a suggestions list.",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {},
          "type": "Number"
        },
        {
          "name": "scroll-target",
          "description": "Scroll target element",
          "sourceRange": {
            "start": {
              "line": 210,
              "column": 6
            },
            "end": {
              "line": 212,
              "column": 7
            }
          },
          "metadata": {},
          "type": "HTMLElement | null | undefined"
        },
        {
          "name": "sizing-target",
          "description": "Sizing target element.",
          "sourceRange": {
            "start": {
              "line": 214,
              "column": 6
            },
            "end": {
              "line": 216,
              "column": 7
            }
          },
          "metadata": {},
          "type": "HTMLElement | null | undefined"
        },
        {
          "name": "loading",
          "description": "True when user query changed and waiting for `source` property update",
          "sourceRange": {
            "start": {
              "line": 220,
              "column": 6
            },
            "end": {
              "line": 225,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "loader",
          "description": "Set this to true if you use async operation in response for query event.\nThis will display a loader when querying for more suggestions.\nDo not use it it you do not handle suggestions asynchronously.",
          "sourceRange": {
            "start": {
              "line": 231,
              "column": 6
            },
            "end": {
              "line": 234,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "is-attached",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 241,
              "column": 6
            },
            "end": {
              "line": 241,
              "column": 25
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "open-on-focus",
          "description": "If true it will opend suggestions on input field focus.",
          "sourceRange": {
            "start": {
              "line": 244,
              "column": 6
            },
            "end": {
              "line": 247,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "loading-changed",
          "description": "Fired when the `loading` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "paper-autocomplete"
    }
  ]
}
