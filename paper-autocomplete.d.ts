/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   paper-autocomplete.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {LitElement, html, css} from 'lit-element';

import {ArcScrollTargetMixin} from '@advanced-rest-client/arc-scroll-target-mixin/arc-scroll-target-mixin.js';

import {ArcOverlayMixin} from '@advanced-rest-client/arc-overlay-mixin/arc-overlay-mixin.js';

export {PaperAutocomplete};

declare namespace UiElements {

  /**
   * # `<paper-autocomplete>`
   */
  class PaperAutocomplete extends
    ArcOverlayMixin(
    ArcScrollTargetMixin(
    Object)) {
    readonly suggestions: Array<String|null>|Array<object|null>|null;
    readonly loading: Boolean|null;

    /**
     * True when user query changed and waiting for `source` property update
     */
    _loading: boolean|null|undefined;

    /**
     * Compatibility with polymer attributes
     */
    _oldOpenOnFocus: boolean|null|undefined;
    _oldSelectedItem: boolean|null|undefined;

    /**
     * A target input field to observe.
     * It accepts an element which is the input with `value` property or
     * an id of an element that is a child of the parent element of this node.
     */
    target: HTMLElement|String|null;
    isAttached: boolean|null|undefined;

    /**
     * List of suggestions to display.
     * If the array items are strings they will be used for display a suggestions and
     * to insert a value.
     * If the list is an object the each object must contain `value` and `display`
     * properties.
     * The `display` property will be used in the suggestions list and the
     * `value` property will be used to insert the value to the referenced text field.
     */
    source: Array<object|null>|Array<String|null>|null;

    /**
     * this property is set when the `target` changes. It is used to remove
     * listeners.
     */
    _oldTarget: HTMLElement|null;
    onquery: Function|null;
    onselected: Function|null;
    readonly _selector: any;

    /**
     * Selected object from the suggestions list.
     */
    selected: object|null|undefined;

    /**
     * Currently selected item on a suggestions list.
     */
    selectedItem: Number|null;

    /**
     * List of suggestion that are rendered.
     */
    _suggestions: any[]|null|undefined;

    /**
     * Scroll target element
     */
    scrollTarget: HTMLElement|String|null;

    /**
     * Set this to true if you use async operation in response for query event.
     * This will display a loader when querying for more suggestions.
     * Do not use it it you do not handle suggestions asynchronously.
     */
    loader: boolean|null|undefined;

    /**
     * If true it will opend suggestions on input field focus.
     */
    openOnFocus: boolean|null|undefined;

    /**
     * When set it disables ripple effect when clicking on a suggestion.
     */
    noink: boolean|null|undefined;
    render(): any;
    connectedCallback(): void;
    disconnectedCallback(): void;
    firstUpdated(): void;

    /**
     * Registers an event handler for given type
     *
     * @param eventType Event type (name)
     * @param value The handler to register
     */
    _registerCallback(eventType: String|null, value: Function|null): void;

    /**
     * Handler for target property change.
     */
    _targetChanged(): void;

    /**
     * Generates an id on passed element.
     *
     * @param target An element to set id on to
     */
    _ensureNodeId(target: HTMLElement|null): void;

    /**
     * Setups relavent aria attributes in the target input.
     *
     * @param target An element to set attribute on to
     */
    _setupTargetAria(target: HTMLElement|null): void;

    /**
     * Handler for target input change.
     */
    _valueChanged(): void;

    /**
     * Disaptches query event and returns it.
     *
     * @param value Current input value.
     */
    _disaptchQuery(value: String|null): CustomEvent|null;

    /**
     * Filter `source` array for current value.
     */
    _filterSuggestions(): void;

    /**
     * Highlight previous suggestion
     */
    selectPrevious(): void;

    /**
     * Highlight next suggestion
     */
    selectNext(): void;

    /**
     * Accepts currently selected suggestion and enters it into a text field.
     */
    acceptSelection(): void;

    /**
     * Dispatches `selected` event with new value.
     *
     * @param value Selected value.
     */
    _inform(value: String|null): void;

    /**
     * Ensure that the selected item is visible in the scroller.
     * When there is more elements to show than space available (height)
     * then some elements will be hidden. When the user use arrows to navigate
     * the selection may get out from the screen. This function ensures that
     * currently selected element is visible.
     *
     * @param bottom If trully it will ensure that the element is
     * visible at the bottom of the container. On the top otherwise.
     */
    ensureItemVisible(bottom: Boolean|null): void;

    /**
     * Handler for target element focus event.
     * Opens the autocomplete if `openOnFocus` is set.
     */
    _targetFocus(): void;

    /**
     * Overrides ArcOverlayMixin#_onCaptureClick. Cancels when the clock target is
     * the input.
     *
     * @param e Original click event
     */
    _onCaptureClick(e: Event|null): void;

    /**
     * Handler for `selected-changed` event on `iron-selector`.
     */
    _selectedHandler(e: CustomEvent|null): void;
    _toggleAriaSelected(item: any): void;
  }
}

declare global {

  interface HTMLElementTagNameMap {
    "paper-autocomplete": UiElements.PaperAutocomplete;
  }
}
